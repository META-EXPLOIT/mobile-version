package br.com.metaexploit.diversight.ui

import android.content.Context
import android.os.Build
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ProgressBar
import androidx.appcompat.widget.AppCompatTextView
import androidx.core.content.res.ResourcesCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import br.com.metaexploit.diversight.R
import br.com.metaexploit.diversight.databinding.FragmentLoginBinding
import br.com.metaexploit.diversight.presenter.login.LoginViewModel
import br.com.metaexploit.diversight.presenter.login.Factory
import br.com.metaexploit.diversight.remote.User
import com.google.android.material.button.MaterialButton
import com.google.android.material.textfield.TextInputLayout

class LoginFragment : Fragment(R.layout.fragment_login) {

    private lateinit var viewModel: LoginViewModel
    private lateinit var binding: FragmentLoginBinding

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_login, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        activity?.window?.statusBarColor =
            ResourcesCompat.getColor(resources, R.color.white, null)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            @Suppress("DEPRECATION")
            activity?.window?.decorView?.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR)
        }

        viewModel = ViewModelProvider(this, Factory()).get(LoginViewModel::class.java)

        binding.btnLogin.setOnClickListener {
            setLoading(true)
            viewModel.login(
                binding.edtEmail.editText?.text.toString(),
                binding.edtPassword.editText?.text.toString()
            )
        }
        setObservers()

        binding.btnSingUp.setOnClickListener {
            findNavController().navigate(
                LoginFragmentDirections.actionLoginFragmentToSingUpPart1Fragment()
            )
        }
    }

    private fun setLoading(option: Boolean) {
        if (option) {
            binding.progressBar.visibility = View.VISIBLE
            binding.bcLoading.visibility = View.VISIBLE
        } else {
            binding.progressBar.visibility = View.INVISIBLE
            binding.bcLoading.visibility = View.INVISIBLE
        }
    }

    private fun setObservers() {
        viewModel.userLiveData.observe(viewLifecycleOwner, { user ->

            saveLocalUser(user)

            binding.txtError.text = ""
            when (user?.message) {
                "Senha Incorreta" -> {
                    binding.txtError.visibility = View.VISIBLE
                    binding.txtError.text = "Senha incorreta"
                    setLoading(false)
                }
                "Usuario Nao Encontrado" -> {
                    binding.txtError.visibility = View.VISIBLE
                    binding.txtError.text = "Usuário não encontrado"
                    setLoading(false)
                }
                else -> {
                    binding.txtError.visibility = View.INVISIBLE
                    setLoading(false)
                    findNavController().navigate(
                        LoginFragmentDirections.actionLoginFragmentToHomeFragment()
                    )
                }
            }
        })
    }

    private fun saveLocalUser(user: User) {

        val sharedPref = activity?.getPreferences(Context.MODE_PRIVATE)
        with (sharedPref?.edit()) {
            this?.putString(getString(R.string.key_user_name), user.name)
            this?.putString(getString(R.string.key_user_skin), user.skin)
            this?.putString(getString(R.string.key_user_sex), user.sex)
            this?.putString(getString(R.string.key_user_gender), user.gender)
            this?.putBoolean(getString(R.string.key_user_pcd), user.pcd)
            this?.putBoolean(getString(R.string.key_user_pcd_visual), user.pcd_visual)
            this?.putBoolean(getString(R.string.key_user_pcd_fisical), user.pcd_hearing)
            this?.putBoolean(getString(R.string.key_user_pcd_hearing), user.pcd_hearing)
            this?.putBoolean(getString(R.string.key_user_pcd_intellectual), user.pcd_intellectual)
            this?.putBoolean(getString(R.string.key_user_pcd_psychosocial), user.pcd_psychosocial)
            this?.putBoolean(getString(R.string.key_user_pcd_readapted), user.pcd_readapted)
            this?.putString(getString(R.string.key_user_birthday), user.birthday)
            this?.putString(getString(R.string.key_user_enterprise), user.enterprise)
            this?.putString(getString(R.string.key_user_occupation), user.occupation)
            this?.putString(getString(R.string.key_user_office), user.office)
            this?.putString(getString(R.string.key_user_email), user.email)

            this?.commit()
        }
    }
}
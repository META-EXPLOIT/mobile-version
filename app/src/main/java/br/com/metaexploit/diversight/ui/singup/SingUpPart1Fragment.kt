package br.com.metaexploit.diversight.ui.singup

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.ArrayAdapter
import android.widget.AutoCompleteTextView
import android.widget.ImageView
import android.widget.LinearLayout
import androidx.appcompat.widget.AppCompatCheckBox
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.room.Room
import br.com.metaexploit.diversight.AppDatabase
import br.com.metaexploit.diversight.User
import br.com.metaexploit.diversight.R
import com.google.android.material.button.MaterialButton
import com.google.android.material.textfield.TextInputLayout
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class SingUpPart1Fragment : Fragment(R.layout.fragment_sing_up_part1) {

    private lateinit var backButton: ImageView

    private lateinit var inputName: TextInputLayout

    private lateinit var inputSkin: TextInputLayout
    private lateinit var autoCompleteSkin: AutoCompleteTextView
    private var selectedSkin: String = ""
    private val listSkin = listOf(
        "Branca",
        "Parda",
        "Preta",
        "Amarela",
        "Indígena"
    )

    private lateinit var inputSex: TextInputLayout
    private lateinit var autoCompleteSex: AutoCompleteTextView
    private var selectedSex: String = ""
    private val listSex = listOf(
        "Cisgênero homem",
        "Cisgênero mulher",
        "Transgênero homem",
        "Transgênero mulher",
        "Agênero",
        "Não binário"
    )

    private lateinit var inputGender: TextInputLayout
    private lateinit var autoCompleteGender: AutoCompleteTextView
    private var selectedGender: String = ""
    private val listGender = listOf(
        "Heterossexual",
        "Homossexual",
        "Bissexual",
        "Panssexual",
        "Assexual"
    )

    private lateinit var inputPcd: TextInputLayout
    private lateinit var autoCompletePcd: AutoCompleteTextView
    private var selectedPcd: Boolean = false
    private val listPcd = listOf(
        "Sim",
        "Não"
    )

    private lateinit var optPcd: LinearLayout

    private lateinit var pcdOpt1: AppCompatCheckBox
    private lateinit var pcdOpt2: AppCompatCheckBox
    private lateinit var pcdOpt3: AppCompatCheckBox
    private lateinit var pcdOpt4: AppCompatCheckBox
    private lateinit var pcdOpt5: AppCompatCheckBox
    private lateinit var pcdOpt6: AppCompatCheckBox

    private lateinit var inputBirthday: TextInputLayout

    private lateinit var nextButton: MaterialButton

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Back button
        backButton = view.findViewById(R.id.fg_sing_up_1_button_back)
        backButton.setOnClickListener {
            findNavController().popBackStack()
        }

        // Name
        inputName = view.findViewById(R.id.fg_sing_up_1_edt_email)

        // Skin
        inputSkin = view.findViewById(R.id.fg_sing_up_1_edt_enterprise)
        autoCompleteSkin = view.findViewById(R.id.fg_sing_up_1_edt_color_autocomplete)
        setAdapter(inputSkin, listSkin)
        autoCompleteSkin.setOnItemClickListener { _, _, position, _ ->
            selectedSkin = listSkin[position].lowercase()
        }

        // Sex
        inputSex = view.findViewById(R.id.fg_sing_up_1_edt_sex)
        autoCompleteSex = view.findViewById(R.id.fg_sing_up_1_edt_sex_autocomplete)
        setAdapter(inputSex, listSex)
        autoCompleteSex.setOnItemClickListener { _, _, position, _ ->
            selectedSex = listSex[position].lowercase()
        }

        // Gender
        inputGender = view.findViewById(R.id.fg_sing_up_1_edt_gender)
        autoCompleteGender = view.findViewById(R.id.fg_sing_up_1_edt_gender_autocomplete)
        setAdapter(inputGender, listGender)
        autoCompleteGender.setOnItemClickListener { _, _, position, _ ->
            selectedGender = listGender[position].lowercase()
        }

        // PCD
        inputPcd = view.findViewById(R.id.fg_sing_up_1_edt_pcd)
        autoCompletePcd = view.findViewById(R.id.fg_sing_up_1_edt_pcd_autocomplete)
        optPcd = view.findViewById(R.id.fg_sing_up_1_pcd_opt)
        pcdOpt1 = view.findViewById(R.id.fg_sing_up_1_pcd_opt_1)
        pcdOpt2 = view.findViewById(R.id.fg_sing_up_1_pcd_opt_2)
        pcdOpt3 = view.findViewById(R.id.fg_sing_up_1_pcd_opt_3)
        pcdOpt4 = view.findViewById(R.id.fg_sing_up_1_pcd_opt_4)
        pcdOpt5 = view.findViewById(R.id.fg_sing_up_1_pcd_opt_5)
        pcdOpt6 = view.findViewById(R.id.fg_sing_up_1_pcd_opt_6)
        setAdapter(inputPcd, listPcd)
        autoCompletePcd.setOnItemClickListener { _, _, position, _ ->
            selectedPcd = when(position) {
                0 -> true
                else -> false
            }

            if (position == 0) {
                optPcd.visibility = View.VISIBLE
            } else {
                pcdOpt1.isChecked = false
                pcdOpt2.isChecked = false
                pcdOpt3.isChecked = false
                pcdOpt4.isChecked = false
                pcdOpt5.isChecked = false
                pcdOpt6.isChecked = false
                optPcd.visibility = View.GONE
            }
        }

        // Birthday
        inputBirthday = view.findViewById(R.id.fg_sing_up_1_edt_birthday)

        // Next button
        nextButton = view.findViewById(R.id.fg_sing_up_1_btn_next)
        nextButton.setOnClickListener {
            nextPart()
        }
    }

    private fun nextPart() {
        findNavController().navigate(
            SingUpPart1FragmentDirections.actionSingUpPart1FragmentToSingUpPart2Fragment(
                inputName.editText?.text.toString(),
                selectedSkin,
                selectedSex,
                selectedGender,
                selectedPcd,
                pcdOpt1.isChecked,
                pcdOpt2.isChecked,
                pcdOpt3.isChecked,
                pcdOpt4.isChecked,
                pcdOpt5.isChecked,
                pcdOpt6.isChecked,
                inputBirthday.editText?.text.toString()
            )
        )
    }

    override fun onPause() {
        super.onPause()
        Log.i("TESTE", "onPause")

        val context = activity?.applicationContext

        CoroutineScope(Dispatchers.IO).launch {
            val db = context?.let {
                Room.databaseBuilder(
                    it,
                    AppDatabase::class.java, "database"
                ).build()
            }

            db?.userDao()?.updateUser(
                User(
                    2,
                    inputName.editText?.text.toString(),
                    selectedSkin,
                    selectedSex,
                    selectedGender,
                    selectedPcd,
                    pcdOpt1.isChecked,
                    pcdOpt2.isChecked,
                    pcdOpt3.isChecked,
                    pcdOpt4.isChecked,
                    pcdOpt5.isChecked,
                    pcdOpt6.isChecked,
                    inputBirthday.editText?.text.toString(),
                    null,
                    null,
                    null,
                    null,
                    null
                )
            )

            Log.i("TESTE", "${db?.userDao()?.getAll()}")
        }
    }

    private fun setAdapter(inputLayout: TextInputLayout, items: List<String>) {
        val adapter = ArrayAdapter(requireContext(), R.layout.list_item, items)
        (inputLayout.editText as? AutoCompleteTextView)?.setAdapter(adapter)
    }
}
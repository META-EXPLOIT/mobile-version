package br.com.metaexploit.diversight.ui

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.ProgressBar
import androidx.appcompat.widget.AppCompatImageView
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.fragment.findNavController
import br.com.metaexploit.diversight.R
import br.com.metaexploit.diversight.presenter.RegisterViewModel
import br.com.metaexploit.diversight.ui.singup.SingUpPart1FragmentDirections
import br.com.metaexploit.diversight.ui.singup.SingUpPart2FragmentDirections
import br.com.metaexploit.diversight.ui.singup.SingUpPart3FragmentDirections
import com.google.android.material.button.MaterialButton

class SingUpFragment : Fragment(R.layout.fragment_sing_up) {

    private lateinit var btnNext: MaterialButton
    private lateinit var progressBar: ProgressBar
    private lateinit var imageButtonBack: AppCompatImageView

    private lateinit var viewModel: RegisterViewModel

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        var currentScreen = 1

        viewModel = ViewModelProvider(this).get(RegisterViewModel::class.java)
//        viewModel.registerScreen.value = false

        btnNext = view.findViewById(R.id.fg_singup_user_btn_next)
        progressBar = view.findViewById(R.id.fg_singup_progress_bar_sing_up)
        imageButtonBack = view.findViewById(R.id.fg_sing_up_button_back)

        val nav1 = (childFragmentManager.findFragmentById(R.id.fg_singup) as NavHostFragment).navController

        imageButtonBack.setOnClickListener {
            if (currentScreen != 1) {
                currentScreen -= 1
                nav1.popBackStack()
            } else if (currentScreen == 1) {
//                imageButtonBack.visibility = View.GONE
//                viewModel.registerScreen.value = true
                findNavController().navigate(
                    SingUpFragmentDirections.actionSingUpFragmentToLoginFragment()
                )
            }
            updateProgressBar(currentScreen)
            Log.i("TESTE", "$currentScreen")
        }

        lateinit var navigationSingUpFragment: () -> Unit

        nav1.addOnDestinationChangedListener { controller, destination, arguments ->
            when (destination.label) {
                "fragment_sing_up_part1" -> {
                    navigationSingUpFragment = {
                        nav1.navigate(SingUpPart1FragmentDirections.actionSingUpPart1FragmentToSingUpPart2Fragment())
                        imageButtonBack.visibility = View.VISIBLE
                        currentScreen += 1
                        updateProgressBar(currentScreen)
                    }
                }
                "fragment_sing_up_part2" -> {
                    navigationSingUpFragment = {
                        nav1.navigate(SingUpPart2FragmentDirections.actionSingUpPart2FragmentToSingUpPart3Fragment())
                        currentScreen += 1
                        updateProgressBar(currentScreen)
                    }
                }
                "fragment_sing_up_part3" -> {
                    navigationSingUpFragment = {
                        nav1.navigate(SingUpPart3FragmentDirections.actionSingUpPart3FragmentToSingUpPart4Fragment())
                        currentScreen += 1
                        updateProgressBar(currentScreen)
                        btnNext.text = "Finalizar"
                    }
                }
                "fragment_sing_up_part4" -> {
                    navigationSingUpFragment = {

                    }
                }
            }
        }

        btnNext.setOnClickListener {
            Log.i("TESTE", "ANTES $currentScreen")
            navigationSingUpFragment()
            Log.i("TESTE", "DEPOIS $currentScreen")
        }
    }

    private fun updateProgressBar(state: Int) {
        progressBar.progress = when (state) {
            1 -> {
                updateTextButton(false)
                15
            }
            2 -> {
                updateTextButton(false)
                38
            }
            3 -> {
                updateTextButton(false)
                71
            }
            else -> {
                updateTextButton(true)
                100
            }
        }
    }

    private fun updateTextButton(final: Boolean) {
        btnNext.text = if (final) "Finalizar" else "Pr√≥ximo"
    }


}
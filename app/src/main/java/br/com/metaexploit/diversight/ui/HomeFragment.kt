package br.com.metaexploit.diversight.ui

import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.widget.AppCompatImageView
import androidx.appcompat.widget.AppCompatTextView
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.core.content.res.ResourcesCompat
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.RecyclerView
import br.com.metaexploit.diversight.R
import br.com.metaexploit.diversight.data.ListCategories
import br.com.metaexploit.diversight.remote.DiversightService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import br.com.metaexploit.diversight.remote.Form
import br.com.metaexploit.diversight.ui.adapter.AdmDemAdapter
import br.com.metaexploit.diversight.ui.adapter.NpsAdapter

class HomeFragment : Fragment(R.layout.fragment_home) {

    private var categories: ListCategories = ListCategories(
        mutableListOf(),
        mutableListOf()
    )


    private lateinit var rcDaily: RecyclerView

    private lateinit var rcWeekly: RecyclerView

    private lateinit var rcNpsTitle: AppCompatTextView
    private lateinit var rcNps: RecyclerView
    private val rcNpsAdapter: NpsAdapter by lazy {
        NpsAdapter {
            setClick(it)
        }
    }

    private lateinit var rcAdmDemTitle: AppCompatTextView
    private lateinit var rcAdmDem: RecyclerView
    private val rcAdmDemAdapter: AdmDemAdapter by lazy {
        AdmDemAdapter {
            setClick(it)
        }
    }

    private lateinit var userScreen: LinearLayoutCompat

    private lateinit var bcImage: AppCompatImageView
    private lateinit var bcText: AppCompatTextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        getForms()
        configureLayout()

        bcImage = view.findViewById(R.id.fg_home_icon)
        bcText = view.findViewById(R.id.fg_home_label_nosearch)

        userScreen = view.findViewById(R.id.fg_home_icon_user)
        userScreen.setOnClickListener {
            findNavController().navigate(R.id.userFragment)
        }

        rcNpsTitle = view.findViewById(R.id.fg_home_surveys_nps_title)
        rcNps = view.findViewById(R.id.fg_home_surveys_nps_rc)
        rcNps.adapter = rcNpsAdapter

        rcAdmDemTitle = view.findViewById(R.id.fg_home_surveys_adm_dem_title)
        rcAdmDem = view.findViewById(R.id.fg_home_surveys_adm_dem_rc)
        rcAdmDem.adapter = rcAdmDemAdapter
    }

    private fun filterResponse(body: List<Form>) {
        categories = ListCategories(
            mutableListOf(),
            mutableListOf()
        )

        var counter = 0
        while (counter < body.size) {
            when (body[counter].type) {
                "nps" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 2
                        counterQuestion += 1
                    }

                    Log.i("TESTE", "${body[counter]}")

                    categories.nps.add(body[counter])
                    Log.i("TESTE", "${body[counter].questions}")
                    counter += 1
                }
                "adm" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 3
                        counterQuestion += 1
                    }

                    categories.admDem.add(body[counter])
                    counter += 1
                }
                "dem" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 4
                        counterQuestion += 1
                    }

                    categories.admDem.add(body[counter])
                    counter += 1
                }
            }
        }
        Log.i("TESTE", "${categories.nps}")
    }

    private fun configureLayout() {
        activity?.window?.statusBarColor =
            ResourcesCompat.getColor(resources, R.color.blue_0, null)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            @Suppress("DEPRECATION")
            activity?.window?.decorView?.setSystemUiVisibility(0)
        }
    }

    private fun getForms() {
        CoroutineScope(Dispatchers.IO).launch {
            val response = DiversightService.newInstance().getForm()
            response.body()?.let { filterResponse(it) }

            CoroutineScope(Dispatchers.Main).launch {
                callAdaptersSet()
                setNoSurvey()
            }
        }
    }

    private fun setClick(content: Form) {
        if (content.type == "diario" && content.type == "semanal") {
            findNavController().navigate(
                HomeFragmentDirections.actionHomeFragmentToEmotionalFragment()
            )
        } else if ((content.type == "nps" || content.type == "admissional") || content.type == "demissional") {
            findNavController().navigate(
                HomeFragmentDirections.actionHomeFragmentToSurveyFragment(content)
            )
        }
    }

    private fun callAdaptersSet() {
        Log.i("TESTE", "${categories.nps.size}")
        if (categories.nps.size > 0) {
            rcNpsAdapter.getNpsForm(categories.nps)
            rcNpsTitle.visibility = View.VISIBLE
            rcNps.visibility = View.VISIBLE
        } else {
            rcNpsTitle.visibility = View.GONE
            rcNps.visibility = View.GONE
        }

        if (categories.admDem.size > 0) {
            rcAdmDemTitle.visibility = View.VISIBLE
            rcAdmDem.visibility = View.VISIBLE

            rcAdmDemAdapter.getAdmDemForm(categories.admDem)
        } else {
            rcAdmDemTitle.visibility = View.GONE
            rcAdmDem.visibility = View.GONE
        }


    }

    private fun setNoSurvey() {
        if (categories.nps.size <= 0 && categories.admDem.size <= 0) {
            bcImage.visibility = View.VISIBLE
            bcText.visibility = View.VISIBLE
        } else {
            bcImage.visibility = View.GONE
            bcText.visibility = View.GONE
        }
    }
}
package br.com.metaexploit.diversight.ui

import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.core.content.res.ResourcesCompat
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import br.com.metaexploit.diversight.R
import br.com.metaexploit.diversight.data.ItemPesquisa
import br.com.metaexploit.diversight.data.ListCategories
import br.com.metaexploit.diversight.remote.DiversightService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import br.com.metaexploit.diversight.remote.Form
import br.com.metaexploit.diversight.remote.FormQuestion
import br.com.metaexploit.diversight.remote.SerializeQuestions
import br.com.metaexploit.diversight.ui.adapter.NpsAdapter

class HomeFragment : Fragment(R.layout.fragment_home) {

    private var categories: ListCategories = ListCategories(
        mutableListOf(),
        mutableListOf(),
        mutableListOf()
    )

    private lateinit var rcDaily: RecyclerView

    private lateinit var rcWeekly: RecyclerView

    private lateinit var rcNps: RecyclerView
    private val rcNpsAdapter: NpsAdapter by lazy {
        NpsAdapter {
            setClick(it)
        }
    }

    private lateinit var rcAdmDem: RecyclerView

    private lateinit var userScreen: LinearLayoutCompat

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        getForms()
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        configureLayout()

        userScreen = view.findViewById(R.id.fg_home_icon_user)
        userScreen.setOnClickListener {
            findNavController().navigate(R.id.userFragment)
        }

        rcNps = view.findViewById(R.id.fg_home_surveys_nps_rc)
        rcNps.adapter = rcNpsAdapter
    }

    private fun filterResponse(body: List<Form>) {
        var counter = 0
        while (counter < body.size) {
            when (body[counter].type) {
                "nps" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 2
                        counterQuestion += 1
                    }

                    Log.i("PROCURANDO", "${body[counter].questions}")

                    categories.nps.add(body[counter])
                    Log.i("TESTE", "${body[counter].questions}")
                    counter += 1
                }
                "admissional" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 3
                        counterQuestion += 1
                    }

                    categories.adm.add(body[counter])
                    counter += 1
                }
                "demissional" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 4
                        counterQuestion += 1
                    }

                    categories.dem.add(body[counter])
                    counter += 1
                }
            }
        }

    }

    private fun configureLayout() {
        activity?.window?.statusBarColor =
            ResourcesCompat.getColor(resources, R.color.blue_0, null)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            @Suppress("DEPRECATION")
            activity?.window?.decorView?.setSystemUiVisibility(0)
        }
    }

    private fun getForms() {
        CoroutineScope(Dispatchers.IO).launch {
            val response = DiversightService.newInstance().getForm()
            response.body()?.let { filterResponse(it) }
            CoroutineScope(Dispatchers.Main).launch {
                rcNpsAdapter.getNpsForm(categories.nps)
            }
        }
    }

    private fun setClick(content: Form) {
        if (content.type == "diario" && content.type == "semanal") {
            findNavController().navigate(
                HomeFragmentDirections.actionHomeFragmentToEmotionalFragment()
            )
        } else if ((content.type == "nps" || content.type == "admissional") || content.type == "demissional") {
            findNavController().navigate(
                HomeFragmentDirections.actionHomeFragmentToSurveyFragment(content)
            )
        }
    }
}
package br.com.metaexploit.diversight.ui

import android.os.Build
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.res.ResourcesCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import br.com.metaexploit.diversight.R
import br.com.metaexploit.diversight.data.ListCategories
import br.com.metaexploit.diversight.databinding.FragmentHomeBinding
import br.com.metaexploit.diversight.remote.DiversightService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import br.com.metaexploit.diversight.remote.Form
import br.com.metaexploit.diversight.ui.adapter.AdmDemAdapter
import br.com.metaexploit.diversight.ui.adapter.DailyAdapter
import br.com.metaexploit.diversight.ui.adapter.NpsAdapter
import br.com.metaexploit.diversight.ui.adapter.WeeklyAdapter

class HomeFragment : Fragment() {

    private var categories: ListCategories = ListCategories(
        mutableListOf(),
        mutableListOf(),
        mutableListOf(),
        mutableListOf()
    )
    
    private val dailyAdapter: DailyAdapter by lazy {
        DailyAdapter {
            setClick(it)
        }
    }

    private val weeklyAdapter: WeeklyAdapter by lazy {
        WeeklyAdapter {
            setClick(it)
        }
    }
    
    private val npsAdapter: NpsAdapter by lazy {
        NpsAdapter {
            setClick(it)
        }
    }
    
    private val admDemAdapter: AdmDemAdapter by lazy {
        AdmDemAdapter {
            setClick(it)
        }
    }

    private lateinit var binding: FragmentHomeBinding
    
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setEmotional()
        getForms()
        configureLayout()

        binding.user.setOnClickListener {
            findNavController().navigate(R.id.userFragment)
        }
        
        setAdapters()
    }

    private fun setAdapters() {
        binding.daily.adapter = dailyAdapter
        binding.weekly.adapter = weeklyAdapter
        binding.nps.adapter = npsAdapter
        binding.admDem.adapter = admDemAdapter
    }

    private fun filterResponse(body: List<Form>) {
        categories = ListCategories(
            mutableListOf(),
            mutableListOf(),
            mutableListOf(),
            mutableListOf()
        )

        var counter = 0
        while (counter < body.size) {
            when (body[counter].type) {
                "nps" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 2
                        counterQuestion += 1
                    }
                    categories.nps.add(body[counter])
                    counter += 1
                }
                "adm" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 3
                        counterQuestion += 1
                    }

                    categories.admDem.add(body[counter])
                    counter += 1
                }
                "dem" -> {
                    var counterQuestion = 0
                    while (counterQuestion < body[counter].questions.size) {
                        body[counter].questions[counterQuestion].type = 4
                        counterQuestion += 1
                    }

                    categories.admDem.add(body[counter])
                    counter += 1
                }
            }
        }
    }

    private fun configureLayout() {
        activity?.window?.statusBarColor =
            ResourcesCompat.getColor(resources, R.color.blue_0, null)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            @Suppress("DEPRECATION")
            activity?.window?.decorView?.setSystemUiVisibility(0)
        }
    }

    private fun getForms() {
        CoroutineScope(Dispatchers.IO).launch {
            val response = DiversightService.newInstance().getForm()
            response.body()?.let { filterResponse(it) }

            CoroutineScope(Dispatchers.Main).launch {
                callAdaptersSet()
                setNoSurvey()
            }
        }
    }

    private fun setClick(content: Form) {
        if (content.type == "diaria" || content.type == "semanal") {
            findNavController().navigate(
                HomeFragmentDirections.actionHomeFragmentToEmotionalFragment(content)
            )
        } else if ((content.type == "nps" || content.type == "adm") || content.type == "dem") {
            findNavController().navigate(
                HomeFragmentDirections.actionHomeFragmentToSurveyFragment(content)
            )
        }
    }

    private fun callAdaptersSet() {
        setEmotional()
        dailyAdapter.getDailyForm(categories.daily)
        binding.titleDaily.visibility = View.VISIBLE
        binding.daily.visibility = View.VISIBLE

        weeklyAdapter.getWeeklyForm(categories.weekly)
        binding.titleWeekly.visibility = View.VISIBLE
        binding.weekly.visibility = View.VISIBLE

        if (categories.nps.size > 0) {
            npsAdapter.getNpsForm(categories.nps)
            binding.titleNps.visibility = View.VISIBLE
            binding.nps.visibility = View.VISIBLE
        } else {
            binding.titleNps.visibility = View.GONE
            binding.nps.visibility = View.GONE
        }

        if (categories.admDem.size > 0) {
            binding.titleAdmDem.visibility = View.VISIBLE
            binding.admDem.visibility = View.VISIBLE

            admDemAdapter.getAdmDemForm(categories.admDem)
        } else {
            binding.titleAdmDem.visibility = View.GONE
            binding.admDem.visibility = View.GONE
        }


    }

    private fun setNoSurvey() {
        if (categories.nps.size <= 0 && categories.admDem.size <= 0) {
            
            binding.icEmpty.visibility = View.VISIBLE
            binding.textEmpty.visibility = View.VISIBLE
        } else {
            binding.icEmpty.visibility = View.GONE
            binding.textEmpty.visibility = View.GONE
        }
    }

    private fun setEmotional() {
        categories.daily.add(Form(
            -1,
            "diaria",
            listOf()
        ))

        categories.weekly.add(Form(
            -1,
            "semanal",
            listOf()
        ))
    }

}